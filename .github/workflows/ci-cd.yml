name: CICD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: umami
  ECS_SERVICE: pastefy-service
  ECS_CLUSTER: pastefy-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Docker Build and Push Steps
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          # Build the Docker image with build arguments
          docker build \
            --build-arg DATABASE_TYPE=postgresql \
            --build-arg DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy" \
            --build-arg BASE_PATH="" \
            -t $ECR_REPOSITORY:$GITHUB_SHA \
            -t $ECR_REPOSITORY:latest \
            .

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Tag images for ECR
          docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Terraform Steps
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform init
        run: terraform init
        working-directory: terraform
      
      - name: Terraform validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform plan
        run: terraform plan -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_secret: ${{ secrets.APP_SECRET }}

      - name: Terraform apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_secret: ${{ secrets.APP_SECRET }}

      # Force ECS to deploy new image
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
        timeout-minutes: 10